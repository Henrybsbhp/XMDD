$(require (lib "template/objc"))
$<${(namespace-by-class-remark 'op)}
$(output-file (format "netop/~aOp.h" (class-name _)))
#import "BaseOp.h"
$(oc:out-import-linked-classes _)

@interface $(out (format "~aOp" (class-name _))) : BaseOp

$<${(namespace (lambda (nd) (properties-by-remark nd 'req)))}
$(when (pair? _)
   (let ([cmt (comment)]) (when cmt (outln cmt)))
   (outln (format "@property (nonatomic,~a) ~a req_~a;"
				  (oc:property-stype _) (oc:property-type _) (property-name _))))
$>
$<${(namespace (lambda (nd) (properties-by-remark nd 'rsp)))}
$(when (pair? _)
   (let ([cmt (comment)]) (when cmt (outln cmt)))
   (outln (format "@property (nonatomic,~a) ~a rsp_~a;"
				  (oc:property-stype _) (oc:property-type _) (property-name _))))
$>

@end
$>


$<${(namespace-by-class-remark 'op)}
$(output-file (format "netop/~aOp.m" (class-name _)))
#import "$(out (class-name _))Op.h"

@implementation $(out (class-name _))Op

- (RACSignal *)rac_postRequest {
    self.req_method = @"$(out (attr-value _ 'path))";
    NSMutableDictionary *params = [NSMutableDictionary dictionary];
$<${(namespace (lambda (nd) (properties-by-remark nd 'req)))}
    $(when (pair? _)
	   (outln (format "[params safetySetObject:~a forKey:@\"~a\"];"
					  (if (oc:ns-value-type _)
						  (format "@(self.req_~a)" (property-name _))
						  (format "self.req_~a" (property-name _)))
					  (property-key _))))
$>
    return [self rac_invokeWithRPCClient:gNetworkMgr.apiManager params:params security:$(out (if (attr-value "auth") "YES" "NO"))];
}

- (instancetype)parseResponseObject:(id)rspObj
{
    $(when (pair? (properties-by-remark 'rsp))
	   (outln "NSDictionary *dict = rspObj;"))
    $(oc:properties-dict-mapping
		(properties-by-remark _ 'rsp)
		(lambda (node k v)
		  (define name (property-name node))
		  (define dv (format "dict[@\"~a\"]" (property-key node)))
		  (define fmt
			(case k
			  ['object dv]
			  ['value (format "[~a ~a]" dv v)]
			  ['class (format "[~a createWithJSONDict:dict]" v)]
			  ['array
			   (outln (format "NSMutableArray *~a = [NSMutableArray array];" name))
			   (outln (format "for (NSDictionary *curDict in ~a) {" dv))
			   (outln (format "~a *obj = [~a createWithJSONDict:curDict];" v v) 8)
			   (outln (format "[~a addObject:obj];" name) 8)
			   (outln "}")
               name]
			  ['date (let ([date-type (attr-value node 'date)])
					   (cond
						[(eq? 'DT14 date-type)
						 (format "[NSDate dateWithD14Text:~a]" dv)]
						 [(eq? 'DT10 date-type)
						  (format "[NSDate dateWithD10Text:~a]" dv)]
						[else (format "[NSDate dateWithUTS:~a]" dv)]))]))
		  (outln (format "self.rsp_~a = ~a;" name fmt))))
	
    return self;
}

@end

$>
